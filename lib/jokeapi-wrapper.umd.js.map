{"version":3,"file":"jokeapi-wrapper.umd.js","sources":["../src/helpers/constants.js","../src/helpers/util.js","../src/index.js"],"sourcesContent":["/**\n * @description The base url for the Joke API\n */\nconst BASE = 'https://v2.jokeapi.dev';\n\n/**\n * @description The host of the Joke API\n */\nconst HOST = 'https://jokeapi.dev';\n\n/**\n * @description The current version for the JokeAPI API\n */\nconst API_VERSION = '2';\n\n/**\n * @description The current categories avaliable\n */\nconst CATEGORIES = [\n  'any',\n  'misc',\n  'programming',\n  'dark',\n  'pun',\n  'spooky',\n  'christmas',\n  'miscellaneous',\n  'coding',\n  'development',\n  'halloween',\n];\n\n/**\n * @description The current blacklist flags avaliable\n */\nconst BLACKLIST_FLAGS = ['nsfw', 'religious', 'political', 'racist', 'sexist', 'explicit'];\n\n/**\n * @description The current formats avaliable\n */\nconst FORMAT = ['json', 'xml', 'yaml', 'txt'];\n\n/**\n * @description The current joke outputs avaliable\n */\nconst TYPE = ['single', 'twopart'];\n\n/**\n * @description Current max amount of jokes\n */\nconst AMOUNT_MAX = 10;\n\nexport default { BASE, HOST, API_VERSION, CATEGORIES, BLACKLIST_FLAGS, FORMAT, TYPE, AMOUNT_MAX };\n","/**\n * @param {string|array} data\n * @returns {string}\n */\nconst parseArray = (data) => {\n  return Array.isArray(data) ? data.join(',') : data;\n};\n\n/**\n * @param {object} params\n * @param {object} options\n * @returns {object}\n */\nconst parseParams = (params, options) => {\n  const parsedParams = {};\n  let wildcard;\n\n  if (!params || !options) return;\n  Object.assign(parsedParams, params);\n\n  // Either in params or options\n  if ('safe-mode' in options) parsedParams['safe-mode'] = 'safe-mode';\n  if ('safe-mode' in params)\n    params['safe-mode'] ? (parsedParams['safe-mode'] = 'safe-mode') : delete parsedParams['safe-mode'];\n\n  if ('format' in options) parsedParams.format = options.format;\n  if ('format' in params) params.format === 'json' ? delete parsedParams.format : (parsedParams.format = params.format);\n\n  if ('blacklistFlags' in params || 'blacklistFlags' in options)\n    parsedParams.blacklistFlags = params.blacklistFlags\n      ? parseArray(params.blacklistFlags)\n      : parseArray(options.blacklistFlags);\n\n  if ('lang' in params || 'lang' in options) parsedParams.lang = params.lang ? params.lang : options.lang;\n\n  // Just in params\n  if ('type' in params) parsedParams.type = parseArray(params.type);\n\n  // set wildcard\n  if ('categories' in params) {\n    wildcard = `/${parseArray(params.categories)}`;\n    delete parsedParams.categories;\n  }\n  if ('language' in params) {\n    wildcard = `/${params.language}`;\n    delete parsedParams.language;\n  }\n\n  return { parsedParams, wildcard };\n};\n\nexport default { parseArray, parseParams };\n","import fetch from 'isomorphic-unfetch';\n\nimport Constants from './helpers/constants';\nimport Util from './helpers/util';\n\n/**\n * @class JokeAPI\n * @author Demian <devaccdemiann@gmail.com>\n * @description A Node.js wrapper for the Joke API with only one dependency. For more information, visit: https://jokeapi.dev/\n * @example\n *     const JokeAPI = require('jokeapi-wrapper');\n *     const JokeAPIClient = new JokeAPi();\n * @public\n * @version 1.0.8\n * @license MIT\n */\nclass JokeAPI {\n  /**\n   * @param {object} options\n   * @param {string} options.apiKey OPTIONAL:: Authorization key\n   * @param {boolean} options.safemode Turn on safemode DEFAULT:: off\n   * @param {string} options.format Change global format DEFAULT:: JSON\n   * @param {string|array} options.blacklistFlags Globally blacklist certain flags, Check JokeClient.BLACKLIST_FLAGS or https://jokeapi.dev/ for flag names\n   * @param {string} options.lang Globally change language DEFAULT:: en\n   */\n  constructor(options = {}) {\n    this._options = options;\n  }\n\n  /**\n   * @description This endpoint is the one you want to call to get a joke.\n   * @function getJoke()\n   * @param {string|array} params.categories\n   * @param {string} params.format\n   * @param {string|array} params.blacklistFlags\n   * @param {string} params.lang\n   * @param {string} params.idRange i.e. 10-25\n   * @param {string} params.contains\n   * @param {string} params.type\n   * @param {number} params.amount i.e. 5 MAX:: 10\n   * @returns {ReturnObject}\n   */\n  getJoke(params = {}) {\n    // eslint-disable-next-line no-param-reassign\n    if (!params.categories) params.categories = 'any';\n\n    const url = this._buildUrl('joke', params);\n    return this._request(url);\n  }\n\n  /**\n   * @description This endpoint provides a lot of information about JokeAPI and its jokes\n   * @function info()\n   * @param {string} params.format\n   * @param {string} params.lang\n   * @returns {ReturnObject}\n   */\n  info(params = {}) {\n    const url = this._buildUrl('info', params);\n    return this._request(url);\n  }\n\n  /**\n   * @description This endpoint returns a list / an array of all available joke categories,\n   * all available category aliases and a 13-character UNIX timestamp.\n   * @function categories()\n   * @param {string} params.format\n   * @param {string} params.lang\n   * @returns {ReturnObject}\n   */\n  categories(params = {}) {\n    const url = this._buildUrl('categories', params);\n    return this._request(url);\n  }\n\n  /**\n   * @description This endpoint returns the ISO 639-1 language code of a provided language.\n   * It is searched with a fuzzy search, so you just have to provide the approximate language name.\n   * The resulting language code is to be used in fetching and submitting jokes in different languages.\n   * @function langcode()\n   * @param {string} params.format\n   * @param {string} params.language\n   * @returns {ReturnObject}\n   */\n  langcode(params = {}) {\n    if (!params.language) return { error: true, message: 'You need to supply a language' };\n\n    const url = this._buildUrl('langcode', params);\n    return this._request(url);\n  }\n\n  /**\n   * @description This endpoint returns lists of supported languages in jokes and supported languages in system messages (error messages).\n   * Also, it returns a list of possible ISO 639-1 language codes you can use to submit a joke or add a translation.\n   * @function languages()\n   * @param {string} params.format\n   * @param {string} params.lang\n   * @returns {ReturnObject}\n   */\n  languages(params = {}) {\n    const url = this._buildUrl('languages', params);\n    return this._request(url);\n  }\n\n  /**\n   * @description This endpoint returns a list / an array of all available blacklist flags and a 13-character UNIX timestamp.\n   * @function flags()\n   * @param {string} params.format\n   * @param {string} params.lang\n   * @returns {ReturnObject}\n   */\n  flags(params = {}) {\n    const url = this._buildUrl('flags', params);\n    return this._request(url);\n  }\n\n  /**\n   * @description This endpoint returns a list / an array of all available response formats and a 13-character UNIX timestamp.\n   * @function formats()\n   * @param {string} params.format\n   * @param {string} params.lang\n   * @returns {ReturnObject}\n   */\n  formats(params = {}) {\n    const url = this._buildUrl('formats', params);\n    return this._request(url);\n  }\n\n  /**\n   * @description This endpoint returns a parameter named \"ping\" that contains the word \"Pong!\"\n   * and a 13-character UNIX timestamp. It is intended for external uptime monitoring\n   * @function ping()\n   * @param {string} params.format\n   * @param {string} params.lang\n   * @returns {ReturnObject}\n   */\n  ping(params = {}) {\n    const url = this._buildUrl('ping', params);\n    return this._request(url);\n  }\n\n  /**\n   * @description This endpoint returns a list / an array of all available endpoints, their usage (method, url and supported parameters) and a short description each.\n   * @function endpoints()\n   * @param {string} params.format\n   * @returns {ReturnObject}\n   */\n  endpoints(params = {}) {\n    const url = this._buildUrl('endpoints', params);\n    return this._request(url);\n  }\n\n  /**\n   * @description This endpoint returns a list / an array of all available endpoints, their usage (method, url and supported parameters) and a short description each.\n   * @function endpoints()\n   * @param {number} params.formatVersion\n   * @param {string} params.category\n   * @param {string} params.type\n   * @param {string} params.joke\n   * @param {object} params.flags\n   * @param {boolean} params.flags.nsfw\n   * @param {boolean} params.flags.religious\n   * @param {boolean} params.flags.political\n   * @param {boolean} params.flags.racist\n   * @param {boolean} params.flags.sexist\n   * @param {boolean} params.flags.explicit\n   * @param {lang} params.lang\n   * @returns {ReturnObject}\n   */\n  submit(params = {}) {\n    const url = this._buildUrl('submit', undefined, params['dry-run']);\n    // Remove dry run from body\n    delete params['dry-run'];\n    return this._request(url, { body: JSON.stringify(params), method: 'POST' });\n  }\n\n  /**\n   * @description Builds the url.\n   * @function _buildUrl()\n   * @param {string} endpoint\n   * @param {string|array} params.categories\n   * @param {string} params.format\n   * @param {string|array} params.blacklistFlags\n   * @param {string} params.lang\n   * @param {number} params.idRange\n   * @param {string} params.contains\n   * @param {string} params.type\n   * @param {number} params.amount\n   * @param {string} params.lang\n   * @param {string} method\n   * @returns {string}\n   */\n  _buildUrl(endpoint, params, testRun) {\n    if (testRun) return `${Constants.BASE}/${endpoint}?dry-run`;\n\n    if (params) {\n      const { parsedParams, wildcard } = Util.parseParams(params, this._options);\n      const url = wildcard ? `${Constants.BASE}/${endpoint}${wildcard}` : `${Constants.BASE}/${endpoint}`;\n\n      return this._buildQuery(url, parsedParams);\n    }\n\n    return `${Constants.BASE}/${endpoint}`;\n  }\n\n  /**\n   * @description Formats object into http query\n   * @function _buildQuery()\n   * @param {string} url\n   * @param {string|array} params.categories\n   * @param {string} params.format\n   * @param {string|array} params.blacklistFlags\n   * @param {string} params.lang\n   * @param {number} params.idRange\n   * @param {string} params.contains\n   * @param {string} params.type\n   * @param {number} params.amount\n   * @param {string} params.lang\n   * @returns {string}\n   */\n  _buildQuery(url, query) {\n    const parsedQuery = Object.entries(query)\n      .map((pair) => {\n        // On some queries there is no value i.e. safemode; so we jsut use the key name\n        return pair[0] === pair[1] ? pair[0] : pair.map(encodeURIComponent).join('=');\n      })\n      .join('&');\n\n    return parsedQuery ? `${url}?${parsedQuery}` : url;\n  }\n\n  /**\n   * @description Sends request to api then returns output in requested format\n   * @function _request()\n   * @param {string} url\n   * @param {object} options\n   * @param {string} options.method\n   * @returns {object}\n   */\n  async _request(url, options) {\n    const headers = {\n      Authorization: this._options.apiKey,\n      'Content-Type': 'application/json',\n    };\n\n    const res = await fetch(url, { ...options, headers });\n\n    const formattedUrl = new URL(url);\n    const urlSearchParams = new URLSearchParams(formattedUrl.search);\n    const format = urlSearchParams.get('format');\n\n    if (format) return res.text();\n\n    return res.json();\n  }\n}\n\nJokeAPI.BASE = Constants.BASE;\nJokeAPI.HOST = Constants.HOST;\nJokeAPI.API_VERSION = Constants.API_VERSION;\nJokeAPI.CATEGORIES = Constants.CATEGORIES;\nJokeAPI.BLACKLIST_FLAGS = Constants.BLACKLIST_FLAGS;\nJokeAPI.FORMAT = Constants.FORMAT;\nJokeAPI.TYPE = Constants.TYPE;\nJokeAPI.AMOUNT_MAX = Constants.AMOUNT_MAX;\n\nexport default JokeAPI;\n"],"names":["parseArray","data","Array","isArray","join","JokeAPI","options","this","_options","getJoke","params","categories","url","_buildUrl","_request","info","langcode","language","error","message","languages","flags","formats","ping","endpoints","submit","undefined","body","JSON","stringify","method","endpoint","testRun","Constants","wildcard","parsedParams","Object","assign","format","blacklistFlags","lang","type","Util","_buildQuery","query","parsedQuery","entries","map","pair","encodeURIComponent","fetch","headers","Authorization","apiKey","res","formattedUrl","URL","URLSearchParams","search","get","text","json","BASE","HOST","API_VERSION","CATEGORIES","BLACKLIST_FLAGS","FORMAT","TYPE","AMOUNT_MAX"],"mappings":"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"}