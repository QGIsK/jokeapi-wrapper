import e from"isomorphic-unfetch";function t(){return(t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r])}return e}).apply(this,arguments)}var s="https://v2.jokeapi.dev";const r=e=>Array.isArray(e)?e.join(","):e;class i{constructor(e={}){this._options=e}getJoke(e={}){e.categories||(e.categories="any");const t=this._buildUrl("joke",e);return this._request(t)}info(e={}){const t=this._buildUrl("info",e);return this._request(t)}categories(e={}){const t=this._buildUrl("categories",e);return this._request(t)}langcode(e={}){if(!e.language)return{error:!0,message:"You need to supply a language"};const t=this._buildUrl("langcode",e);return this._request(t)}languages(e={}){const t=this._buildUrl("languages",e);return this._request(t)}flags(e={}){const t=this._buildUrl("flags",e);return this._request(t)}formats(e={}){const t=this._buildUrl("formats",e);return this._request(t)}ping(e={}){const t=this._buildUrl("ping",e);return this._request(t)}endpoints(e={}){const t=this._buildUrl("endpoints",e);return this._request(t)}submit(e={}){const t=this._buildUrl("submit",void 0,e["dry-run"]);return delete e["dry-run"],this._request(t,{body:JSON.stringify(e),method:"POST"})}_buildUrl(e,t,i){if(i)return`${s}/${e}?dry-run`;if(t){const{parsedParams:i,wildcard:n}=((e,t)=>{const s={};let i;if(e&&t)return Object.assign(s,e),"safe-mode"in t&&(s["safe-mode"]="safe-mode"),"safe-mode"in e&&(e["safe-mode"]?s["safe-mode"]="safe-mode":delete s["safe-mode"]),"format"in t&&(s.format=t.format),"format"in e&&("json"===e.format?delete s.format:s.format=e.format),("blacklistFlags"in e||"blacklistFlags"in t)&&(s.blacklistFlags=r(e.blacklistFlags?e.blacklistFlags:t.blacklistFlags)),("lang"in e||"lang"in t)&&(s.lang=e.lang?e.lang:t.lang),"type"in e&&(s.type=r(e.type)),"categories"in e&&(i=`/${r(e.categories)}`,delete s.categories),"language"in e&&(i=`/${e.language}`,delete s.language),{parsedParams:s,wildcard:i}})(t,this._options);return this._buildQuery(n?`${s}/${e}${n}`:`${s}/${e}`,i)}return`${s}/${e}`}_buildQuery(e,t){const s=Object.entries(t).map(e=>e[0]===e[1]?e[0]:e.map(encodeURIComponent).join("=")).join("&");return s?`${e}?${s}`:e}async _request(s,r){const i={Authorization:this._options.apiKey,"Content-Type":"application/json"},n=await e(s,t({},r,{headers:i})),a=new URL(s);return new URLSearchParams(a.search).get("format")?n.text():n.json()}}i.BASE=s,i.HOST="https://jokeapi.dev",i.API_VERSION="2",i.CATEGORIES=["any","misc","programming","dark","pun","spooky","christmas","miscellaneous","coding","development","halloween"],i.BLACKLIST_FLAGS=["nsfw","religious","political","racist","sexist","explicit"],i.FORMAT=["json","xml","yaml","txt"],i.TYPE=["single","twopart"],i.AMOUNT_MAX=10;export{i as default};
//# sourceMappingURL=index.modern.js.map
